name: Release

on:
  push:
    branches: [ main ]

jobs:
  release-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      upload_url: ${{ steps.set_version.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: '21'

      - run: npm install

      - run: npx semantic-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set version and upload URL
        id: set_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          # Fetch release details and extract upload_url directly
          UPLOAD_URL=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${VERSION}" | \
            jq -r '.upload_url | sub("{.*$"; "")')
          if [ -z "$UPLOAD_URL" ]; then
            echo "Error: Could not fetch upload_url" >&2
            exit 1
          fi
          echo "upload_url=${UPLOAD_URL}" >> $GITHUB_OUTPUT
          echo "Debug: upload_url set to ${UPLOAD_URL}"

  package-and-upload:
    needs: release-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.13'

      - name: Create runtime artifact
        run: |
          mkdir -p release
          cp requirements.txt release/
          cp -r src release/
          cd release
          zip -r ../runtime-${{ needs.release-version.outputs.version }}.zip .

      - name: Debug outputs
        run: |
          echo "Version: ${{ needs.release-version.outputs.version }}"
          echo "Upload URL: ${{ needs.release-version.outputs.upload_url }}"

      - name: Upload runtime artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.release-version.outputs.upload_url }}
          asset_path: ./runtime-${{ needs.release-version.outputs.version }}.zip
          asset_name: runtime-${{ needs.release-version.outputs.version }}.zip
          asset_content_type: application/zip